# This is the main configuration file for the application.
# ~~~~~

play.editor="http://localhost:63342/api/file/?file=%s&line=%s"

# Always use minified assets, if available
play.assets.checkForMinified = true

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!

# This must be changed for production, but we recommend not changing it in this file.
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.http.secret.key = abcdefghijk

# The available languages
# ~~~~~
play.i18n.langs = ["en", "et", "ru", "hy", "fr"]

# To remove some languages, add the above line to prod.conf and keep
# only the languages that are needed, e.g. play.i18n.langs = ["en", "fr"]
# To disable multi-language support altogether, leave the list empty:
# play.i18n.langs = []

date.format.et = "dd.MM.yyyy hh:mm"

# Maximum POST data (file upload) size, e.g. 30MB. Default is 10MB
# play.http.parser.maxDiskBuffer = 30720k

# Registers the error handler
# ~~~~~
play.http.errorHandler = "utils.ErrorHandler"

play.http.context = "/catis"

# URL refix (hostnames) for normal requests and certificate authentication links
# If using Apache httpd, the two hostnames can be the same and location-based SSLVerifyClient
# directive can be used.
# If using Nginx, which does not support TLS renegotiation, two differenc hostnames have to
# be used and the one mapped to certprefix should be configured with "ssl_verify_client on"
play.http.urlprefix = "https://example.com"
play.http.certprefix = "https://example.com"

silhouette.authenticator.cookieDomain="example.com"

# What authentication methods are available
authentication.methods = ["password", "certificate"]

# What modules are enabled. The order of top-level modules ("publicservices", "institutions",
# "systems", "services", "assets") in this array also determines top navigation order
catis.modules.enabled = ["publicservices", "institutions", "systems", "services", "assets", "processes", "owners", "users", "subordinates", "subsystems", "joined"]

# What modules to disable, e.g.
# catis.modules.disabled = ["assets", "processes"]

# If this is false, self registrations are disabled after the first (admin) user has registered
selfregistration.enabled = false

# Registers the custom filters
# play.http.filters = "utils.Filters"
play.filters.enabled+=com.mohiva.play.htmlcompressor.HTMLCompressorFilter
play.filters.enabled+=com.mohiva.play.xmlcompressor.XMLCompressorFilter

play.filters.hosts {
  # Allow requests to upmind.ee, its subdomains, and localhost:9000.
  allowed = [".example.com", "localhost:9000"]
}
# Alternatively, disable allowed host checking in development (not recommended in production)
# play.filters.disabled+=play.filters.hosts.AllowedHostsFilter


# The application DI modules
# ~~~~
play.modules.enabled += "play.api.libs.mailer.MailerModule"
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"
play.modules.enabled += "modules.SilhouetteModule"
play.modules.enabled += "modules.AuthTokenModule"
play.modules.enabled += "modules.JobModule"
play.modules.enabled += "modules.ApplicationModule"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"

# Database connection
# -----
mongodb.uri = "mongodb://localhost:27017/catis"

# ReactiveMongo Akka configuration
mongo-async-driver {
  akka {
    loglevel = WARNING
  }
}

akka {
  loglevel = INFO
  jvm-exit-on-fatal-error = off
}

# For scheduler config options, see https://github.com/enragedginger/akka-quartz-scheduler#configuration-of-quartz-scheduler
akka.quartz.schedules {

  # Auth token cleaner
  AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }

  # Workflow reminder, every day at 6:00
  WorkflowReminder {
    #    expression = "0/15 * * * * ?" #testing, fire every 15 seconds
    expression = "0 0 6 * * ?"
    timezone = "UTC"
    description = "send overdue process reminders every day at 6:00"
  }

}


# How many days to remind about overdue processes
workflow.remind.days = 3

# Generated identifiers format
# -----
institution.idformat = "IN%05d"
system.idformat = "IS%05d"
service.idformat = "SE%05d"
publicservice.idformat = "PS%05d"
asset.idformat = "IA%05d"
registration.idformat = "RE%05d"

# XRoad client settings
xroad.server.address = "http://xroad.example.com"
xroad.server.endpointUrl = "http://xroad.example.com/cgi-bin/consumer-proxy"
xroad.instance = ee-test
xroad.client.memberClass = COM
xroad.client.memberCode = 12345678
xroad.client.subsystemCode = catis
xroad.client.userId = 123456789

# Field and it's value in a service object to indicate that this is an X-Road servise
# Used to display or hide the WSDL download link from X-Road security server
xroad.service.fieldname = "service.general.classification"
xroad.service.fieldvalue = "X-Road"

# Field name on institution form, where X-Road memberClass attribute can be found
xroad.memberclass.fieldname = "xroad.membership.memberClass"

# Enable HTTP cache for XRoad requests
# play.ws.cache.enabled = true

# WS timeout settings (defaults are 120 and 120)
play.ws.timeout.connection = 10.seconds
play.ws.timeout.idle = 30.seconds

# Mailer settings
# -----
play.mailer {
  host = localhost
#  port (defaults to 25)
#  ssl (defaults to no)
#  tls (defaults to no)
#  user (optional)
#  password (optional)
#  debug (defaults to no, to take effect you also need to set the log level to "DEBUG" for the application logger)
#  timeout (defaults to 60s in milliseconds)
#  connectiontimeout (defaults to 60s in milliseconds)
#  mock (defaults to no, will only log all the email properties instead of sending an email)
  from = "CatIS <catis@example.com>"
  mock = yes
}

# If logged in users can start new institution registration requests
authenticated.registration.enabled = true
# If anonymous users can start new institution registration requests
anonymous.registration.enabled = true

registration.sendto = "catis@example.com"

accesslog.ttl = 7.days
accesslog.logReads = true
accesslog.logAnonymousReads = false

# Security Filter Configuration - Content Security Policy
# ~~~~~
#play.filters.headers.contentSecurityPolicy
# default-src
# 'self'
# img-src
# 'self'
# fbcdn-profile-a.akamaihd.net (Facebook)
# *.twimg.com (Twitter)
# *.googleusercontent.com (Google)
# *.xingassets.com (Xing)
# vk.com (VK)
# *.yimg.com (Yahoo)
# secure.gravatar.com
# style-src
# 'self'
# 'unsafe-inline'
# cdnjs.cloudflare.com
# maxcdn.bootstrapcdn.com
# cdn.jsdelivr.net
# fonts.googleapis.com
# 'unsafe-inline' (in-line css found in bootstrap.min.js)
# font-src
# 'self'
# fonts.gstatic.com
# fonts.googleapis.com
# cdnjs.cloudflare.com
# script-src
# 'self'
# clef.io
# connect-src
# 'self'
# twitter.com
# *.xing.com
# frame-src
# clef.io
#play.filters.headers.contentSecurityPolicy="default-src 'self'; img-src 'self' fbcdn-profile-a.akamaihd.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com; style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com; font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com; script-src 'self' clef.io; connect-src 'self' twitter.com *.xing.com; frame-src clef.io"

play.filters.headers.contentSecurityPolicy="default-src 'self'; img-src 'self' data: uicdn.toast.com *.googleusercontent.com secure.gravatar.com; style-src 'self' 'unsafe-inline' uicdn.toast.com cdnjs.cloudflare.com maxcdn.bootstrapcdn.com fonts.googleapis.com; font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' uicdn.toast.com oss.maxcdn.com; connect-src 'self'"

# play.filters.csrf.header.bypassHeaders {
#   X-Requested-With = "*"
#   Csrf-Token = "nocheck"
# }

include "silhouette.conf"

